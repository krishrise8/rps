{"version":3,"sources":["History.tsx","Leaderboard.tsx","GameView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["History","name","allHistory","classes","makeStyles","root","width","list","overflowX","margin","listitem","maxWidth","listitemtxt","textAlign","useStyles","useEffect","console","log","className","List","component","aria-label","map","history","ListItem","ListItemText","primary","moment","date","format","winner","Leaderboard","useState","allLeaderBoard","setLeaderboard","fetch","then","response","json","data","paper","table","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","row","key","user","scope","games","GameView","choices","Player1Input","Player2Input","player1Name","setP1Name","player2Name","setP2Name","player1Choice","setP1Choice","player2Choice","setP2Choice","roundHistory","setRoundHistory","p1Error","setP1Error","p2Error","setP2Error","counter","setCounter","p1Wins","setP1Wins","p2Wins","setP2Wins","setAllHistory","draw","setDraw","enterNames","setNames","setUser","role","setRole","a","handleValidation","requestOptions","method","headers","body","JSON","stringify","toUpperCase","roundId","RPS","player1wins","player2wins","winnerNumber","incrementWinner","p2Win","historyDate","dateObj","unix","newHistory","id","playerOne","playerTwo","saveHistory","winnerName","bestOfThree","round","authorities","authority","catch","error","type","value","onChange","e","target","onClick","trim","display","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.97ba1c4d.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef, useLayoutEffect } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport moment from 'moment'\nimport { makeStyles } from '@material-ui/core/styles';\n\ntype HistoryProps = {\n    name: string,\n    allHistory: Array<any>\n}     \n  \n\nconst History: React.FC<HistoryProps>= ({name, allHistory}) => { \n    \n\n    const useStyles = makeStyles({\n        root: {\n            width: \"100%\",\n        },\n      list: {\n          width: \"100%\",\n          overflowX: \"auto\",\n          margin: \"auto\",\n        },\n        listitem: {\n            margin: \"auto\",\n            maxWidth: 500,\n          },\n          listitemtxt: {\n            margin: \"auto\",\n            textAlign: \"center\",\n          }\n      });\n        \n      \n    const classes = useStyles();\n\n    useEffect(() => {\n        console.log('name ' + name + 'allHistory ' + allHistory)\n    }, [])\n\n    // const firstUpdate = useRef(true);\n    // useLayoutEffect(() => {\n    //   if (firstUpdate.current) {\n    //     firstUpdate.current = false;\n    //     return;\n    //   }\n\n    //   fetch('http://localhost:8080/game/getHistory/'+ name)\n    //   .then(response => response.json())\n    //   .then(data => {\n    //       console.log(data)\n    //       setAllHistory([...data])\n    //   })\n    //   .catch(error => console.log('Request failed', error));\n\n    // }, []);\n\n    return (\n        <div className={classes.root}>\n            <h3>History</h3>\n            <List className={classes.list} component=\"nav\" aria-label=\"history list\">\n            {\n            allHistory.map((history) => \n            <ListItem className={classes.listitem}>\n                <ListItemText className={classes.listitemtxt} primary={moment(history.date).format('LLL') + \": \" + history.winner + \" wins best of 3\"} />\n            </ListItem>   \n            )\n            }\n            </List>\n        </div>\n    )\n\n}\n\nexport default History","import React, { useEffect, useState } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\n\n\nconst Leaderboard: React.FC = () => {\n\nconst [allLeaderBoard, setLeaderboard] = useState<Array<any>>([])\n\n     useEffect(() => {\n        fetch('/game/getLeaderboard')\n        .then(response => response.json())\n        .then(data => {\n            console.log(data)\n            setLeaderboard([...allLeaderBoard, ...data])\n        });\n        }, [])\n\n\n    const useStyles = makeStyles({\n          root: {\n            width: \"100%\"\n        },\n        paper: {\n            width: \"100%\",\n            overflowX: \"auto\",\n            margin: \"auto\",\n          },\n        table: {\n            margin: \"auto\",\n            maxWidth: 200,\n        },\n        });\n          \n        \n    const classes = useStyles();\n    \n\n    return (\n        <div className= {classes.root}>\n        <h3>Leaderboard</h3>\n        <Paper className={classes.paper}>\n        <Table className={classes.table} aria-label=\"simple table\">\n            <TableHead>\n                <TableRow>\n                    <TableCell>Name</TableCell>\n                    <TableCell align=\"right\">Games Won</TableCell>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n            {allLeaderBoard.map((row) => (\n                <TableRow key={row.user}>\n                    <TableCell component=\"th\" scope=\"row\">\n                    {row.user}\n                    </TableCell>\n                    <TableCell align=\"right\">{row.games}</TableCell>\n                </TableRow>\n            ))}\n        </TableBody>\n      </Table>\n      </Paper>\n      </div>\n    )\n\n}\n\nexport default Leaderboard","import React, { useState, useEffect } from 'react';\nimport moment from 'moment'\nimport History from './History';\nimport Leaderboard from './Leaderboard'\n\ntype InputComponentProps = {\n  Player1Input: string\n  Player2Input: string\n}     \n\n\nconst GameView: React.FC<InputComponentProps> = ({Player1Input, Player2Input}) => {\n\n  const [player1Name, setP1Name] = useState<string>(\"\")\n  const [player2Name, setP2Name] = useState<string>(\"\")\n  const [player1Choice, setP1Choice] = useState<string>(Player1Input)\n  const [player2Choice, setP2Choice] = useState<string>(Player2Input)\n  const [roundHistory, setRoundHistory] = useState<Array<string>>([])\n  const [p1Error, setP1Error] = useState<string>()\n  const [p2Error, setP2Error] = useState<string>()\n  const [counter, setCounter] = useState<number>(0)\n  const [p1Wins, setP1Wins] = useState<number>(0)\n  const [p2Wins, setP2Wins] = useState<number>(0)\n  const [allHistory, setAllHistory] = useState<Array<any>>([])\n  const [draw, setDraw] = useState<boolean>(false)\n  const [enterNames, setNames] = useState<boolean>(false)\n  const [user, setUser] = useState<string>(\"\")\n  const [role, setRole] = useState<string>(\"\")\n  \n  enum choices{\n    'ROCK', 'PAPER', 'SCISSORS'\n  }\n\n  useEffect(() => {\n\n\n    fetch('/game/username')\n    .then(response => response.json())\n    .then(data => {\n        console.log(data)\n        setUser(data.name)\n        console.log('username ' + data.name)\n        setRole(data.authorities[0].authority)\n        console.log('role ' + data.authorities[0].authority)\n        return fetch('/game/getHistory/' + data.name)\n    })\n    .then(response => response.json())\n    .then(data => {\n        console.log(data)\n        setAllHistory([...data])\n    })\n    .catch(error => console.log('Request failed', error));\n  \n  }, [])\n\n\n  async function score() {\n\n    setP1Error('')\n    setP2Error('')\n    setP1Choice('')\n    setP2Choice('')\n\n    let validChoices = handleValidation(player1Choice, player2Choice)\n\n    if(validChoices){\n      const requestOptions = {\n        method: 'POST',\n        headers: {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json', 'Accept': 'application/json'},\n        body: JSON.stringify({ player1Name: player1Name, player1Choice: player1Choice.toUpperCase() , player2Name: player2Name, player2Choice : player2Choice.toUpperCase(), roundId: counter})\n      };\n\n      await fetch('/game/play', requestOptions)\n        .then(response => response.json())\n        .then(data => {\n          RPS(data)\n         \n        });\n    }\n  }\n\n  \n  function RPS( data : any){\n    var player1wins : number = 0;\n    var player2wins : number = 0;\n    // if there's no draw\n    if(data.winnerNumber !== 0){\n      incrementWinner(data.winnerNumber);\n      if (data.winnerNumber === 1) {\n        player1wins = p1Wins + 1\n        setP1Wins(p1Wins+1)\n      }\n      if (data.winnerNumber === 2) {\n        player2wins = p2Wins + 1\n        setP2Wins(p2Wins+1)\n      }\n      // if player 1 or player 2 has won twice\n      if(player1wins === 2 || player2wins === 2){\n        // does best of three stuff: displays winner, saves history\n        bestOfThree(player1wins, player2wins)\n        // resets the round counter to zero\n        setCounter(0)\n\n        // no best of three winner yet\n      }else{\n        setDraw(false)\n        var round = \"Round \" + (counter + 1) + \": \" + data.winnerName + \" wins\";\n        ((counter === 0) ? (setRoundHistory([round])) : (setRoundHistory([...roundHistory, round])))\n        setCounter(counter + 1)\n      }\n    }\n    // there was a draw\n    else{\n      setDraw(true)\n      var round = \"Draw. Play Again\"\n    }\n    \n  }\n\n  /**\n   * In the round results: \"Best of three..\" and saves the history to\n   * allHistory.\n   * @param p1Wins\n   * @param p2Win\n   */\n  function bestOfThree(p1Wins : number, p2Win: number){\n    var winner = (p1Wins === 2 ? player1Name : player2Name)\n    setRoundHistory([ \"Best of three: \" + winner + \" wins\"])\n    var historyDate = moment().format('LLL')\n    var dateObj = moment(historyDate).unix()*1000\n    var newHistory = {'date':dateObj, 'winner':winner};\n    console.log(newHistory)\n    saveHistory(dateObj, winner)\n    setAllHistory([...allHistory, newHistory])\n    console.log(\"allHistory\" + allHistory)\n    setP1Wins(0)\n    setP2Wins(0)\n\n    console.log(\"history date \" + historyDate)\n\n    //save winner off\n    saveLeaderboard(winner)\n  }\n\n  function saveHistory(historyDate : any, winner: string){\n\n    const requestOptions = {\n      method: 'POST',\n      headers: {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json', 'Accept': 'application/json'},\n      body: JSON.stringify({id: 0, playerOne: player1Name, playerTwo: player2Name, winner: winner, date: historyDate})\n    };\n\n    fetch('/game/saveHistory', requestOptions)\n      .then(response => response.json())\n      .then(data => {\n          console.log('fetch save History' + data)\n      });\n\n  }\n\n  function saveLeaderboard(winnerName: string){\n\n    fetch('/game/saveLeaderboard/' + winnerName)\n    .then(response => response.json())\n    .then(data => {\n        console.log(data)\n    });\n  }\n\n  function incrementWinner(winner : number) {\n    if (winner === 1) {\n      setP1Wins(p1Wins+1)\n    }\n    if (winner === 2) {\n      setP2Wins(p2Wins+1)\n    }\n  }\n\n  function handleValidation(player1Choice : string, player2Choice : string){\n\n    if(!(player1Choice.toUpperCase() in choices)){\n      setP1Error('Invalid throw - must be rock, paper, or scissors')\n    }\n\n    if(!(player2Choice.toUpperCase() in choices)){\n      setP2Error('Invalid throw - must be rock, paper, or scissors')\n    }\n\n    if(player1Choice === \"\"){\n      setP1Error('Required')\n    }\n\n    if(player2Choice === \"\"){\n      setP2Error('Required')\n    }\n    return (player1Choice.toUpperCase() in choices) && (player2Choice.toUpperCase() in choices)\n  }\n\n  function addName(){\n    if(player1Name.trim() !== \"\" && player2Name.trim() !== \"\" ){\n      setNames(true)\n    }\n\n  }\n  \n  return (\n    <div> \n        {!enterNames &&\n          <div>\n            <h3>{\"Enter Player 1 and Player 2 Names: \"}</h3>\n            <div>\n              <input type={'text'} value={player1Name} onChange={(e: any) => setP1Name(e.target.value)} />\n            </div>\n            <div>\n              <input type={'text'} value={player2Name} onChange={(e: any) => setP2Name(e.target.value)} />\n            </div>\n            <button onClick={addName}> Add </button>\n          </div>\n        }\n\n        {enterNames &&\n          <div>\n            <h3>{player1Name}</h3>\n              <input type={'text'} value={player1Choice} onChange={(e: any) => setP1Choice(e.target.value)} />\n              <div>{p1Error}</div>\n\n            <h3>{player2Name}</h3>\n              <input type={'text'} value={player2Choice} onChange={(e: any) => setP2Choice(e.target.value)} />\n              <div>{p2Error}</div>\n\n\n            <br/>\n            <button onClick={score}> Submit </button>\n            <br/>\n            <div>{ \n              draw ? (<div>Draw. Play Again</div>) : (roundHistory.map(display => <div>{display}</div>))\n            }</div>\n          </div>\n        }\n        <br/>\n        <History name={user} allHistory={allHistory}/>\n      {role === 'ROLE_ADMIN' && <Leaderboard/> }\n\n    </div>\n  )\n}\n\nexport default GameView","import React from 'react';\nimport './App.css';\nimport GameView from './GameView';\n\n\nfunction App() {\n\n\n\n  return (\n    <div className=\"App\">\n        <GameView Player1Input={''} Player2Input={''} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}