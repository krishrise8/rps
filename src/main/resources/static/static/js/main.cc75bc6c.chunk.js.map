{"version":3,"sources":["GameView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GameView","choices","Player1Input","Player2Input","useState","player1Name","setP1Name","player2Name","setP2Name","player1Choice","setP1Choice","player2Choice","setP2Choice","roundHistory","setRoundHistory","p1Error","setP1Error","p2Error","setP2Error","counter","setCounter","p1Wins","setP1Wins","p2Wins","setP2Wins","allHistory","setAllHistory","draw","setDraw","enterNames","setNames","a","handleValidation","requestOptions","method","headers","body","JSON","stringify","toUpperCase","roundId","fetch","then","response","json","data","RPS","player1wins","player2wins","winnerNumber","winner","incrementWinner","p2Win","historyDate","moment","format","newHistory","bestOfThree","round","winnerName","type","value","onChange","e","target","onClick","trim","map","display","className","history","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cc75bc6c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION } from 'constants';\nimport moment from 'moment'\n\ntype InputComponentProps = {\n  Player1Input: string\n  Player2Input: string\n}     \n\n\nconst GameView: React.FC<InputComponentProps> = ({Player1Input, Player2Input}) => {\n\n  const [player1Name, setP1Name] = useState<string>(\"\")\n  const [player2Name, setP2Name] = useState<string>(\"\")\n  const [player1Choice, setP1Choice] = useState<string>(Player1Input)\n  const [player2Choice, setP2Choice] = useState<string>(Player2Input)\n  const [roundHistory, setRoundHistory] = useState<Array<string>>([])\n  const [p1Error, setP1Error] = useState<string>()\n  const [p2Error, setP2Error] = useState<string>()\n  const [counter, setCounter] = useState<number>(0)\n  const [winner, setWinner] = useState<Map<String, Number>>()\n  const [p1Wins, setP1Wins] = useState<number>(0)\n  const [p2Wins, setP2Wins] = useState<number>(0)\n  const [allHistory, setAllHistory] = useState<Array<string>>([])\n  const [draw, setDraw] = useState<boolean>(false)\n  const [enterNames, setNames] = useState<boolean>(false)\n\n  \n  enum choices{\n    'ROCK', 'PAPER', 'SCISSORS'\n  }\n\n  async function score() {\n\n    setP1Error('')\n    setP2Error('')\n    setP1Choice('')\n    setP2Choice('')\n\n    let validChoices = handleValidation(player1Choice, player2Choice)\n\n    if(validChoices){\n      const requestOptions = {\n        method: 'POST',\n        headers: {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json', 'Accept': 'application/json'},\n        body: JSON.stringify({ player1Name: player1Name, player1Choice: player1Choice.toUpperCase() , player2Name: player2Name, player2Choice : player2Choice.toUpperCase(), roundId: counter})\n      };\n\n      await fetch('http://localhost:8080/game/play', requestOptions)\n        .then(response => response.json())\n        .then(data => {\n          RPS(data)\n         \n        });\n    }\n  }\n\n  function RPS( data : any){\n    var player1wins : number = 0;\n    var player2wins : number = 0;\n    // if there's no draw\n    if(data.winnerNumber !== 0){\n      incrementWinner(data.winnerNumber);\n      if (data.winnerNumber === 1) {\n        player1wins = p1Wins + 1\n        setP1Wins(p1Wins+1)\n      }\n      if (data.winnerNumber === 2) {\n        player2wins = p2Wins + 1\n        setP2Wins(p2Wins+1)\n      }\n      // if player 1 or player 2 has won twice\n      if(player1wins === 2 || player2wins === 2){\n        // does best of three stuff: displays winner, saves history\n        bestOfThree(player1wins, player2wins)\n        // resets the round counter to zero\n        setCounter(0)\n\n        // no best of three winner yet\n      }else{\n        setDraw(false)\n        var round = \"Round \" + (counter + 1) + \": \" + data.winnerName + \" wins\";\n        // incrementWinner(data.winnerNumber);\n        ((counter === 0) ? (setRoundHistory([round])) : (setRoundHistory([...roundHistory, round])))\n        //addDisplayHistory(round)\n        setCounter(counter + 1)\n      }\n      // setCounter(counter + 1)\n    }\n    // there was a draw\n    else{\n      setDraw(true)\n      var round = \"Draw. Play Again\"\n    }\n    // resetCounter(counter)\n    \n  }\n\n  /**\n   * In the round results: \"Best of three..\" and saves the history to\n   * allHistory.\n   * @param p1Wins\n   * @param p2Win\n   */\n  function bestOfThree(p1Wins : number, p2Win: number){\n    var winner = (p1Wins === 2 ? player1Name : player2Name)\n    setRoundHistory([ \"Best of three: \" + winner + \" wins\"])\n    var historyDate = moment().format('LLL')\n    var newHistory = historyDate +  \": \"+ winner + \" wins Best of 3\"\n    setAllHistory([...allHistory, newHistory])\n    setP1Wins(0)\n    setP2Wins(0)\n\n    //save history off \n    saveHistory(historyDate, winner)\n\n    //save winner off\n    saveWinner(winner)\n  }\n\n  function saveHistory(historyDate : any, winnerText: string){}\n\n  function saveWinner(winnerText: string){}\n\n  \n  function resetCounter(counter: number) {\n    if (counter === 2) {\n      setCounter(0)\n    }\n  }\n\n  function incrementWinner(winner : number) {\n    if (winner === 1) {\n      setP1Wins(p1Wins+1)\n    }\n    if (winner === 2) {\n      setP2Wins(p2Wins+1)\n    }\n  }\n\n  function handleValidation(player1Choice : string, player2Choice : string){\n\n    if(!(player1Choice.toUpperCase() in choices)){\n      setP1Error('Invalid throw - must be rock, paper, or scissors')\n    }\n\n    if(!(player2Choice.toUpperCase() in choices)){\n      setP2Error('Invalid throw - must be rock, paper, or scissors')\n    }\n\n    if(player1Choice === \"\"){\n      setP1Error('Required')\n    }\n\n    if(player2Choice === \"\"){\n      setP2Error('Required')\n    }\n    // setRoundHistory([])\n    return (player1Choice.toUpperCase() in choices) && (player2Choice.toUpperCase() in choices)\n  }\n\n  function addName(){\n    if(player1Name.trim() !== \"\" && player2Name.trim() !== \"\" ){\n      setNames(true)\n    }\n\n  }\n  \n  return (\n    <div> \n        {!enterNames &&\n          <div>\n            <h3>{\"Enter Player 1 and Player 2 Names: \"}</h3>\n            <div>\n              <input type={'text'} value={player1Name} onChange={(e: any) => setP1Name(e.target.value)} />\n            </div>\n\n            <div>\n              <input type={'text'} value={player2Name} onChange={(e: any) => setP2Name(e.target.value)} />\n            </div>\n            <button onClick={addName}> Add </button>\n          </div>\n        }\n\n        {enterNames &&\n          <div>\n            <h3>{player1Name+\"'s throw\"}</h3>\n              <input type={'text'} value={player1Choice} onChange={(e: any) => setP1Choice(e.target.value)} />\n              <div>{p1Error}</div>\n\n            <h3>{player2Name+\"'s throw\"}</h3>\n              <input type={'text'} value={player2Choice} onChange={(e: any) => setP2Choice(e.target.value)} />\n              <div>{p2Error}</div>\n\n\n            <br/>\n            <button onClick={score}> Submit </button>\n            <br/>\n            <div>{ \n              draw ? (<div>Draw. Play Again</div>) : (roundHistory.map(display => <div>{display}</div>))\n            }</div>\n          </div>\n        }\n\n      <br/>\n      <div className=\"dd-wrapper\">\n        <div className=\"dd-header\">\n          <div className=\"dd-header-title\">History</div>\n        </div>\n        <ul className=\"dd-list\">\n          {allHistory.map(history => <li>{history}</li>)}\n        </ul>\n      </div>\n\n    </div>\n  )\n}\n\nexport default GameView","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport GameView from './GameView';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <GameView Player1Input={''} Player2Input={''} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}