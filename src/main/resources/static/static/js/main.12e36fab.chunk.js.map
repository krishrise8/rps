{"version":3,"sources":["History.tsx","GameView.tsx","Leaderboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["History","name","allHistory","List","component","aria-label","map","history","ListItem","ListItemText","primary","moment","date","format","winner","GameView","choices","Player1Input","Player2Input","useState","player1Name","setP1Name","player2Name","setP2Name","player1Choice","setP1Choice","player2Choice","setP2Choice","roundHistory","setRoundHistory","p1Error","setP1Error","p2Error","setP2Error","counter","setCounter","p1Wins","setP1Wins","p2Wins","setP2Wins","setAllHistory","draw","setDraw","enterNames","setNames","user","setUser","a","handleValidation","requestOptions","method","headers","body","JSON","stringify","toUpperCase","roundId","fetch","then","response","json","data","RPS","player1wins","player2wins","winnerNumber","incrementWinner","p2Win","historyDate","dateObj","unix","console","log","newHistory","id","playerOne","playerTwo","text","saveHistory","winnerName","bestOfThree","round","useEffect","catch","error","type","value","onChange","e","target","onClick","trim","display","Leaderboard","allLeaderBoard","setLeaderboard","classes","makeStyles","root","width","paper","overflowX","margin","table","maxWidth","useStyles","className","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","row","key","scope","games","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.12e36fab.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport moment from 'moment'\n\ntype HistoryProps = {\n    name: string,\n    allHistory: Array<any>\n}     \n  \n\nconst History: React.FC<HistoryProps>= ({name, allHistory}) => {    \n\n    return (\n        <div>\n            <h3>History</h3>\n            <List component=\"nav\" aria-label=\"history list\">\n            {\n            allHistory.map((history) => \n            <ListItem>\n                <ListItemText primary={moment(history.date).format('LLL') + \": \" + history.winner + \" wins best of 3\"} />\n            </ListItem>   \n            )\n            }\n            </List>\n        </div>\n    )\n\n}\n\nexport default History","import React, { useState, useEffect } from 'react';\nimport moment from 'moment'\nimport History from './History';\n\ntype InputComponentProps = {\n  Player1Input: string\n  Player2Input: string\n}     \n\n\nconst GameView: React.FC<InputComponentProps> = ({Player1Input, Player2Input}) => {\n\n  const [player1Name, setP1Name] = useState<string>(\"\")\n  const [player2Name, setP2Name] = useState<string>(\"\")\n  const [player1Choice, setP1Choice] = useState<string>(Player1Input)\n  const [player2Choice, setP2Choice] = useState<string>(Player2Input)\n  const [roundHistory, setRoundHistory] = useState<Array<string>>([])\n  const [p1Error, setP1Error] = useState<string>()\n  const [p2Error, setP2Error] = useState<string>()\n  const [counter, setCounter] = useState<number>(0)\n  const [winner, setWinner] = useState<Map<String, Number>>()\n  const [p1Wins, setP1Wins] = useState<number>(0)\n  const [p2Wins, setP2Wins] = useState<number>(0)\n  const [allHistory, setAllHistory] = useState<Array<string>>([])\n  const [draw, setDraw] = useState<boolean>(false)\n  const [enterNames, setNames] = useState<boolean>(false)\n  const [user, setUser] = useState<string>(\"\")\n\n  \n\n  \n  enum choices{\n    'ROCK', 'PAPER', 'SCISSORS'\n  }\n\n  useEffect(() => {\n\n\n    fetch('http://localhost:8080/game/username')\n    .then(response => response.text())\n    .then(data => {\n        console.log(data)\n        setUser(data)\n        return fetch('http://localhost:8080/game/getHistory/' + data)\n    })\n    .then(response => response.json())\n    .then(data => {\n        console.log(data)\n        setAllHistory([...allHistory, ...data])\n    })\n    .catch(error => console.log('Request failed', error));\n  \n  }, [])\n\n\n  async function score() {\n\n    setP1Error('')\n    setP2Error('')\n    setP1Choice('')\n    setP2Choice('')\n\n    let validChoices = handleValidation(player1Choice, player2Choice)\n\n    if(validChoices){\n      const requestOptions = {\n        method: 'POST',\n        headers: {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json', 'Accept': 'application/json'},\n        body: JSON.stringify({ player1Name: player1Name, player1Choice: player1Choice.toUpperCase() , player2Name: player2Name, player2Choice : player2Choice.toUpperCase(), roundId: counter})\n      };\n\n      await fetch('http://localhost:8080/game/play', requestOptions)\n        .then(response => response.json())\n        .then(data => {\n          RPS(data)\n         \n        });\n    }\n  }\n\n  \n  function RPS( data : any){\n    var player1wins : number = 0;\n    var player2wins : number = 0;\n    // if there's no draw\n    if(data.winnerNumber !== 0){\n      incrementWinner(data.winnerNumber);\n      if (data.winnerNumber === 1) {\n        player1wins = p1Wins + 1\n        setP1Wins(p1Wins+1)\n      }\n      if (data.winnerNumber === 2) {\n        player2wins = p2Wins + 1\n        setP2Wins(p2Wins+1)\n      }\n      // if player 1 or player 2 has won twice\n      if(player1wins === 2 || player2wins === 2){\n        // does best of three stuff: displays winner, saves history\n        bestOfThree(player1wins, player2wins)\n        // resets the round counter to zero\n        setCounter(0)\n\n        // no best of three winner yet\n      }else{\n        setDraw(false)\n        var round = \"Round \" + (counter + 1) + \": \" + data.winnerName + \" wins\";\n        ((counter === 0) ? (setRoundHistory([round])) : (setRoundHistory([...roundHistory, round])))\n        setCounter(counter + 1)\n      }\n    }\n    // there was a draw\n    else{\n      setDraw(true)\n      var round = \"Draw. Play Again\"\n    }\n    \n  }\n\n  /**\n   * In the round results: \"Best of three..\" and saves the history to\n   * allHistory.\n   * @param p1Wins\n   * @param p2Win\n   */\n  function bestOfThree(p1Wins : number, p2Win: number){\n    var winner = (p1Wins === 2 ? player1Name : player2Name)\n    setRoundHistory([ \"Best of three: \" + winner + \" wins\"])\n    var historyDate = moment().format('LLL')\n    var dateObj = moment(historyDate).unix()*1000\n    console.log(\"Date object  \" + dateObj)\n    var newHistory = historyDate +  \": \"+ winner + \" wins Best of 3\"\n    setAllHistory([...allHistory, newHistory])\n    setP1Wins(0)\n    setP2Wins(0)\n\n    console.log(\"history date \" + historyDate)\n    //save history off \n    saveHistory(dateObj, winner)\n\n    //save winner off\n    saveLeaderboard(winner)\n  }\n\n  function saveHistory(historyDate : any, winner: string){\n\n    const requestOptions = {\n      method: 'POST',\n      headers: {'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json', 'Accept': 'application/json'},\n      body: JSON.stringify({id: 0, playerOne: player1Name, playerTwo: player2Name, winner: winner, date: historyDate})\n    };\n\n    fetch('http://localhost:8080/game/saveHistory', requestOptions)\n      .then(response => response.text())\n      .then(data => {\n        if(data === 'true'){\n          console.log('history was inserted')\n        }else{\n          console.log('history failed to insert')\n        }\n        \n      });\n\n  }\n\n\n  function saveLeaderboard(winnerName: string){\n\n    fetch('http://localhost:8080/game/saveLeaderboard/' + winnerName)\n    .then(response => response.json())\n    .then(data => {\n        console.log(data)\n    });\n  }\n\n  \n  function resetCounter(counter: number) {\n    if (counter === 2) {\n      setCounter(0)\n    }\n  }\n\n  function incrementWinner(winner : number) {\n    if (winner === 1) {\n      setP1Wins(p1Wins+1)\n    }\n    if (winner === 2) {\n      setP2Wins(p2Wins+1)\n    }\n  }\n\n  function handleValidation(player1Choice : string, player2Choice : string){\n\n    if(!(player1Choice.toUpperCase() in choices)){\n      setP1Error('Invalid throw - must be rock, paper, or scissors')\n    }\n\n    if(!(player2Choice.toUpperCase() in choices)){\n      setP2Error('Invalid throw - must be rock, paper, or scissors')\n    }\n\n    if(player1Choice === \"\"){\n      setP1Error('Required')\n    }\n\n    if(player2Choice === \"\"){\n      setP2Error('Required')\n    }\n    return (player1Choice.toUpperCase() in choices) && (player2Choice.toUpperCase() in choices)\n  }\n\n  function addName(){\n    if(player1Name.trim() !== \"\" && player2Name.trim() !== \"\" ){\n      setNames(true)\n    }\n\n  }\n  \n  return (\n    <div> \n        {!enterNames &&\n          <div>\n            <h3>{\"Enter Player 1 and Player 2 Names: \"}</h3>\n            <div>\n              <input type={'text'} value={player1Name} onChange={(e: any) => setP1Name(e.target.value)} />\n            </div>\n            <div>\n              <input type={'text'} value={player2Name} onChange={(e: any) => setP2Name(e.target.value)} />\n            </div>\n            <button onClick={addName}> Add </button>\n          </div>\n        }\n\n        {enterNames &&\n          <div>\n            <h3>{player1Name}</h3>\n              <input type={'text'} value={player1Choice} onChange={(e: any) => setP1Choice(e.target.value)} />\n              <div>{p1Error}</div>\n\n            <h3>{player2Name}</h3>\n              <input type={'text'} value={player2Choice} onChange={(e: any) => setP2Choice(e.target.value)} />\n              <div>{p2Error}</div>\n\n\n            <br/>\n            <button onClick={score}> Submit </button>\n            <br/>\n            <div>{ \n              draw ? (<div>Draw. Play Again</div>) : (roundHistory.map(display => <div>{display}</div>))\n            }</div>\n          </div>\n        }\n        <br/>\n        <History name={user} allHistory={allHistory}/>\n    </div>\n  )\n}\n\nexport default GameView","import React, { useEffect, useState } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\n\n\nconst Leaderboard: React.FC = () => {\n\nconst [allLeaderBoard, setLeaderboard] = useState<Array<any>>([])\n\n     useEffect(() => {\n        fetch('http://localhost:8080/game/getLeaderboard')\n        .then(response => response.json())\n        .then(data => {\n            console.log(data)\n            setLeaderboard([...allLeaderBoard, ...data])\n        });\n        }, [])\n\n\n    const useStyles = makeStyles({\n          root: {\n            width: \"100%\"\n        },\n        paper: {\n            width: \"100%\",\n            overflowX: \"auto\",\n            margin: \"auto\",\n          },\n        table: {\n            margin: \"auto\",\n            maxWidth: 200,\n        },\n        });\n          \n        \n    const classes = useStyles();\n    \n\n    return (\n        <div className= {classes.root}>\n        <h3>Leaderboard</h3>\n        <Paper className={classes.paper}>\n        <Table className={classes.table} aria-label=\"simple table\">\n            <TableHead>\n                <TableRow>\n                    <TableCell>Name</TableCell>\n                    <TableCell align=\"right\">Games Won</TableCell>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n            {allLeaderBoard.map((row) => (\n                <TableRow key={row.user}>\n                    <TableCell component=\"th\" scope=\"row\">\n                    {row.user}\n                    </TableCell>\n                    <TableCell align=\"right\">{row.games}</TableCell>\n                </TableRow>\n            ))}\n        </TableBody>\n      </Table>\n      </Paper>\n      </div>\n    )\n\n}\n\nexport default Leaderboard","import React from 'react';\nimport './App.css';\nimport GameView from './GameView';\nimport Leaderboard from './Leaderboard'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <GameView Player1Input={''} Player2Input={''} />\n        <br/>\n        <Leaderboard/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}